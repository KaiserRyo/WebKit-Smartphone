# Copyright (c) 2010 Research In Motion Limited. All rights reserved.
# Research In Motion Limited proprietary and confidential.
#
# Python module for interacting with MKS Integrity

import re
import urllib2

from webkitpy.internal.rimbugzilla import RIMBugzilla, RIMBug

from webkitpy.common.system.deprecated_logging import log
from webkitpy.thirdparty.BeautifulSoup import BeautifulSoup
from xml.dom.minidom import Document, parseString

class MKSBug(object):

    # Maps rim_bug.platform() to MKS handheld
    _map_rim_to_mks_handhelds = {"Bold R020" : "R020", "Essex" : "Essex", "Onyx" : "Onyx", "Oxford" : "Oxford", "Storm R027" : "R027", "Talladega" : "Talladega"}
    _default_mks_handheld = "Talladega"

    # Maps rim_bug.os() to MKS targeted release
    _map_rim_to_mks_release = {"5.2" : "5.2.0", "6.0" : "6.0.0", "6.0 MR1" : "6.0.0 Talladega MR1", "6.1" : "6.1.0"}
    _default_mks_releasee = "6.0.0"

    # Maps rim_bug.component() to MKS sub component
    _map_rim_to_mks_sub_component = {"Chrome" : "Browser UI", "Core UI" : "Browser UI", "Java Client" : "BrowserField API"}
    _default_mks_sub_component = "WebKit"

    def __init__(self, rim_bug):
        self.bug = rim_bug

    def reporter(self):
        # FIXME: We should use the MKS username of the reporter of the Bugzilla bug. See RIM Bug #1131.
        return "dbates"

    def issue_owner(self):
        # FIXME: We should use the MKS username of the assigned user of the Bugzilla bug. See RIM Bug #1131.
        return "dbates"

    def component(self):
        return "Browser"

    def sub_component(self):
        component = self.bug.component();
        if (self._map_rim_to_mks_sub_component.has_key(component)):
            return self._map_rim_to_mks_sub_component[component]
        else:
            return self._default_mks_sub_component

    def targeted_release(self):
        os = self.bug.os();
        if (self._map_rim_to_mks_release.has_key(os)):
            return self._map_rim_to_mks_release[os]
        else:
            return self._default_mks_releasee

    def handheld_discovered_on(self):
        platform = self.bug.platform();
        if (self._map_rim_to_mks_handhelds.has_key(platform)):
            return self._map_rim_to_mks_handhelds[platform]
        else:
            return self._default_mks_handheld

    def finder_email(self):
        return self.bug.reporter_email()

    def title(self):
        return self.bug.title()

    def description(self):
        return """This is an automatic bug report generated by the NeedsMKS Bot.

%s

Olympia Bug #%d - %sshow_bug.cgi?id=%d.""" % (self.bug.description(), self.bug.id(), RIMBugzilla.bug_server_url, self.bug.id())

    def issue_type(self):
        return "Software Defect Report"

    def has_ui_impact(self):
        return "No"

    def build_type(self):
        return "Development/Test"

    def build_version(self):
        return "n/a"

    def reproducible(self):
        return "Yes"

    def frequency_of_occurrence(self):
        return "Frequent"

    def assignee(self):
        return "+Assign Developer"

class MKSIntegrity(object):

    _mks_request_template = """
    <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://WebService.Indy.rim.net">
        <soapenv:Header/>
        <soapenv:Body>
            <web:createDevTask>
            <web:web_service_key>bugsdas890ad2320a22kzilla</web:web_service_key>
            <web:type_name>Handheld Dev Task</web:type_name>
            <web:change_number>Implementation</web:change_number>
            </web:createDevTask>
        </soapenv:Body>
    </soapenv:Envelope>
    """

    def __init__(self, dryrun=False, committers=None):
        self.dryrun = dryrun

    # FIXME: Much of this should go into some sort of config module:
    bug_server_host = "indy-testvm1.devlab2k.testnet.rim.net" # 10.11.191.75 as of  07/09/2010.
    bug_server_regex = "https?://%s/" % re.sub('\.', '\\.', bug_server_host)
    bug_server_url = "http://%s/" % bug_server_host

    def create_bug(self, mks_bug):

        log('Creating MKS bug with title "%s"' % mks_bug.title())
        if (self.dryrun):
            return -1

        dev_task_xml = self._create_mks_request(bug_title=mks_bug.title(),
                                                bug_description=mks_bug.description(),
                                                component=mks_bug.component(),
                                                sub_component=mks_bug.sub_component(),
                                                build_type=mks_bug.build_type(),
                                                build_version=mks_bug.build_version(),
                                                targeted_release=mks_bug.targeted_release(),
                                                has_ui_impact=mks_bug.has_ui_impact(),
                                                reproducible=mks_bug.reproducible(),
                                                frequency_of_occurrence=mks_bug.frequency_of_occurrence(),
                                                issue_type=mks_bug.issue_type(),
                                                handheld_discovered_on=mks_bug.handheld_discovered_on(),
                                                reporter=mks_bug.reporter(),
                                                reporter_email=mks_bug.finder_email(),
                                                issue_owner=mks_bug.issue_owner(),
                                                assignee=mks_bug.assignee())

        request = urllib2.Request(self.bug_server_url + "IndyWebServices/services/P4ChangeHelperFunctions")
        request.add_header("SOAPAction", "http://indy-testvm1/")
        request.add_data(dev_task_xml)
        response = urllib2.urlopen(request)
        response_str = response.read()
        return self._parse_mks_response_for_mks_id(response_str)

    def _create_mks_request(self,
                            bug_title,
                            bug_description,
                            handheld_discovered_on,
                            targeted_release,
                            component,
                            sub_component,
                            build_type,
                            build_version,
                            has_ui_impact,
                            reproducible,
                            frequency_of_occurrence,
                            issue_type,
                            reporter,
                            reporter_email,
                            issue_owner,
                            assignee):

        document = parseString(self._mks_request_template)
        node = document.getElementsByTagName("web:createDevTask")[0]
        node.appendChild(self._create_mks_field_value_node("Summary", bug_title, value_is_html=True))
        node.appendChild(self._create_mks_field_value_node("Dev Task Component", component))
        node.appendChild(self._create_mks_field_value_node("Dev Task Sub Component", sub_component))
        node.appendChild(self._create_mks_field_value_node("Handheld Discovered On", handheld_discovered_on))
        node.appendChild(self._create_mks_field_value_node("Build Type", build_type))
        node.appendChild(self._create_mks_field_value_node("Development/Test Build", "n/a"))
        node.appendChild(self._create_mks_field_value_node("Customer Importance", "2 - Medium"))
        node.appendChild(self._create_mks_field_value_node("UI Impact", has_ui_impact))
        node.appendChild(self._create_mks_field_value_node("Targeted Release(s)", targeted_release))
        node.appendChild(self._create_mks_field_value_node("Description", bug_description, value_is_html=True))
        node.appendChild(self._create_mks_field_value_node("Issue Type", issue_type))

        # FIXME: Due to a quirk in the web service, we report our reason as Triage (instead of Implementing) so
        # that the bug is filed in Implementation state with reason Implementing.
        node.appendChild(self._create_mks_field_value_node("Reason", "Triage"))

        node.appendChild(self._create_mks_field_value_node("Issue Owner", issue_owner))
        node.appendChild(self._create_mks_field_value_node("Assigned User", assignee))
        node.appendChild(self._create_mks_field_value_node("Activity", "Production"))
        node.appendChild(self._create_mks_field_value_node("Finder Role", "Developer"))
        node.appendChild(self._create_mks_field_value_node("Internal Finder", reporter))
        node.appendChild(self._create_mks_field_value_node("Finder E-Mail", reporter_email))
        node.appendChild(self._create_mks_field_value_node("Finder Company", "**RIM"))
        node.appendChild(self._create_mks_field_value_node("Reproducible", reproducible))
        node.appendChild(self._create_mks_field_value_node("Frequency of Occurrence", frequency_of_occurrence))
        node.appendChild(self._create_mks_field_value_node("Component Target Releases", "6.0.0"))
        node.appendChild(self._create_mks_field_value_node("Technical Risk", "3 - Average"))
        node.appendChild(self._create_mks_field_value_node("Include in RN/KIL", "Yes"))
        node.appendChild(self._create_mks_field_value_node("What deliverable caused the problem?", ""))
        node.appendChild(self._create_mks_field_value_node("Why did this problem occur on the deliverable?", ""))
        return document.toxml(encoding="UTF-8")

    @staticmethod
    def _create_mks_field_value_node(field_name, field_value, value_is_html=False):
        field_node = Document().createElement("web:field_values")
        field_node.appendChild(Document().createTextNode("%s=" % field_name))
        if value_is_html:
            field_node.appendChild(Document().createComment(" MKS HTML "))
        field_node.appendChild(Document().createTextNode(field_value))
        return field_node

    @staticmethod
    def _parse_mks_response_for_mks_id(response):
        # Part of the response may be encoded as HTML entities. We need to
        # decode such entities so as to retrieve the text of <value>
        decoded = BeautifulSoup(response, convertEntities=BeautifulSoup.XML_ENTITIES)
        soup = BeautifulSoup(decoded.encode("UTF-8"))
        return int(soup.find("value").string)
