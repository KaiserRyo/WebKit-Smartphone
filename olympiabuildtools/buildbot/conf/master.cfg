# -*- python -*-
# ex: set syntax=python:

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES
#Buildslaves are created with username and passwd as params
#
#SLAVE		USER		PC		DESC
#slave_scottbot	sccameron	CI0000000091221	Scotty Desktop
#slave_	sccameron	CI0000000091221	Scotty Desktop

slaves = ["scottbot","yyz"]
test_slaves = []		#test slaves are used to test buildbot implementations
				#like DRT tests and reporting.  Only specific slaves
				#are allowed to have these and are triggered by a submit
				#to the buildbot_test branch

nightly_p4_bin_slave = "CI0000000091221"	#This slave copies the binaries from
						#the nightly (full) build into p4.


c['slaves'] = []
c['slavePortnum'] = []
slave_names = []	#list of buildbot slaves (slave_XX)
test_slave_names = []	#list of buildbot slaves to run test builds (slave_xx)
incremental_fledge_builder_name = 'Win32_fledge_increm'
incremental_fledge_drt_builder_name = 'Win32_fledge_drt_increm'
incremental_device_builder_name = 'Win32_device_increm'
all_incremental_builder_names = [incremental_fledge_builder_name, incremental_device_builder_name]
all_incremental_drt_builder_names = [incremental_fledge_drt_builder_name]
full_builder_names = []
try_fledge_builder_names = []
try_fledge_drt_builder_names = []
try_device_builder_names = []
all_try_builder_names = []

#Only specific slaves run test builds
test_builder_names = []

from buildbot.buildslave import BuildSlave
#Get a dynamic list of names (used so that I just have to add slave names at the
#top and run "buildbot reconfigure" when i add a new slave
for slave in test_slaves:
	slave_name = "slave_" + slave
	test_slave_names.append(slave_name)
	test_builder_names.append("test_" + slave)

for slave in slaves:
	slave_name = "slave_" + slave
	slave_names.append(slave_name)

	full_builder_names.append("Win32_Full_+DRT_" + slave)
	try_fledge_builder_names.append("Win32_Trial_fledge_" + slave)
	try_fledge_drt_builder_names.append("Win32_Trial_fledge_drt_" + slave)
	try_device_builder_names.append("Win32_Trial_device_" + slave)
	all_try_builder_names.append("Win32_Trial_fledge_" + slave)
	all_try_builder_names.append("Win32_Trial_fledge_drt_" + slave)
	all_try_builder_names.append("Win32_Trial_device_" + slave)

	c['slaves'].append(BuildSlave(slave_name, slave_name, max_builds=1))

	

c['slavePortnum'] = 9989

####### CHANGESOURCES
# the 'change_source' setting tells the buildmaster how it should find out about changes
from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()


####### SCHEDULERS
#NOTE: branch= is the branch you want to trigger this builder on.
#
#A schedule is created for watching modification to the master branch of the olympia repository.
#If this branch is modified, one of the builders will be triggered to execute the incremental
#build.
#
#Another schedule is created for a nigthtly build.
#
from buildbot.scheduler import Scheduler,Dependent,AnyBranchScheduler,Nightly
c['schedulers'] = []
#c['schedulers'].append(Scheduler(name="olympia_try_device", branch="buildbot_try", treeStableTimer=10, builderNames=try_device_builder_names))
#c['schedulers'].append(Scheduler(name="olympia_try_fledge", branch="buildbot_try", treeStableTimer=11, builderNames=try_fledge_builder_names))
#c['schedulers'].append(Scheduler(name="olympia_try_fledge_drt", branch="buildbot_try", treeStableTimer=12, builderNames=try_fledge_drt_builder_names))

olymp_incr_dev = AnyBranchScheduler(name="olympia_incremental_device", treeStableTimer=300, builderNames=[incremental_device_builder_name], branches=['master','master_26'])
olymp_incr_fle = AnyBranchScheduler(name="olympia_incremental_fledge", treeStableTimer=301, builderNames=[incremental_fledge_builder_name], branches=['master','master_26'])
olymp_drt_fle = Dependent(name="olympia_incremental_fledge_drt", upstream=olymp_incr_fle, builderNames=[incremental_fledge_drt_builder_name])
c['schedulers'] = [olymp_incr_dev, olymp_incr_fle, olymp_drt_fle]


c['schedulers'].append(Scheduler(name="olympia_test", branch="buildbot_test", treeStableTimer=0, builderNames=test_builder_names))

c['schedulers'].append(Nightly(name="olympia_full", branch="", hour=1, minute=15, builderNames=full_builder_names))

####### BUILDERS

from buildbot.process import factory
from buildbot.steps.shell import ShellCommand, WithProperties
incremental_fledge_git_factory	= factory.BuildFactory()
incremental_fledge_drt_git_factory	= factory.BuildFactory()
incremental_device_git_factory	= factory.BuildFactory()
test_git_factory	= factory.BuildFactory()
full_git_factory	= factory.BuildFactory()
try_fledge_git_factory		= factory.BuildFactory()
try_fledge_drt_git_factory		= factory.BuildFactory()
try_device_git_factory		= factory.BuildFactory()

#========================
# SCRIPT			# PURPOSE
# bb__build.sh 		runs the incremental/full build on the slave.
#========================
my_build_command	= "c:\\Git\\bin\\sh.exe --login ../bb_build.sh"
my_test_build_command	= "c:\\Git\\bin\\sh.exe --login ../bb_test_build.sh"

incremental_fledge_git_factory.addStep(ShellCommand, name="fledge", command=[
					my_build_command,
					"-a",
					WithProperties("%(branch)s"),
					"-t",
					"incremental",
					"-b",
					WithProperties("%(buildnumber)s"),
					"-d",
					"fledge",
					"-r",
					WithProperties("rev:%(revision)s")
					], workdir=".")

incremental_fledge_drt_git_factory.addStep(ShellCommand, name="fledge_drt", command=[
					my_build_command,
					"-a",
					WithProperties("%(branch)s"),
					"-t",
					"drt",
					"-b",
					WithProperties("%(buildnumber)s"),
					"-d",
					"fledge",
					"-r",
					WithProperties("rev:%(revision)s")
					], workdir=".")


incremental_device_git_factory.addStep(ShellCommand, name="device", command=[
					my_build_command,
					"-a",
					WithProperties("%(branch)s"),
					"-t",
					"incremental",
					"-b",
					WithProperties("%(buildnumber)s"),
					"-d",
					"talladega",
					"-r",
					WithProperties("rev:%(revision)s")
					], workdir=".")


test_git_factory.addStep(ShellCommand, name="test", command=[
					my_test_build_command,
					"-a",
					WithProperties("%(branch)s"),
					"-t",
					"test",
					"-b",
					WithProperties("%(buildnumber)s"),
					"-r",
					WithProperties("rev:%(revision)s")
					], workdir=".")


full_git_factory.addStep(ShellCommand, name="full", command=[
					my_build_command,
					"-t",
					"full",
					"-b",
					WithProperties("%(buildnumber)s"),
					"-n",
					nightly_p4_bin_slave,
					"-r",
					WithProperties("rev:%(revision)s")
					], workdir=".")
#Another step will provide warning messages
full_git_factory.addStep(ShellCommand, name="full_warnings", command=[
					my_build_command,
					"-t",
					"full",
					"-b",
					WithProperties("%(buildnumber)s"),
					"-d",
					"warnings"
					], workdir=".")



try_fledge_git_factory.addStep(ShellCommand, name="try", command=[
					my_build_command,
					"-a",
					WithProperties("%(branch)s"),
					"-t",
					"incremental",
					"-b",
					WithProperties("%(buildnumber)s"),
					"-d",
					"fledge",
					"-n",
					nightly_p4_bin_slave,
					"-r",
					WithProperties("rev:%(revision)s")
					], workdir=".")


try_fledge_drt_git_factory.addStep(ShellCommand, name="try_drt", command=[
					my_build_command,
					"-a",
					WithProperties("%(branch)s"),
					"-t",
					"drt",
					"-b",
					WithProperties("%(buildnumber)s"),
					"-d",
					"fledge",
					"-n",
					nightly_p4_bin_slave,
					"-r",
					WithProperties("rev:%(revision)s")
					], workdir=".")

try_device_git_factory.addStep(ShellCommand, name="try", command=[
					my_build_command,
					"-a",
					WithProperties("%(branch)s"),
					"-t",
					"incremental",
					"-b",
					WithProperties("%(buildnumber)s"),
					"-d",
					"talladega",
					"-n",
					nightly_p4_bin_slave,
					"-r",
					WithProperties("rev:%(revision)s")
					], workdir=".")

c['builders'] = []
#Each builder will have an incremental build directory.
#This directory will be cleaned, rebase, and re-built with a
#full schedule every night at 1:15am.
#for num in range(0,len(slaves)):
#Incremental (fledge)
this_builder = {
        'name': incremental_fledge_builder_name,
	'slavenames': slave_names,
	'factory': incremental_fledge_git_factory,
}
c['builders'].append(this_builder)
#Incremental (fledge_drt)
this_builder = {
        'name': incremental_fledge_drt_builder_name,
	'slavenames': slave_names,
	'factory': incremental_fledge_drt_git_factory,
}
c['builders'].append(this_builder)

#Incremental (device)
this_builder = {
        'name': incremental_device_builder_name,
	'slavenames': slave_names,
	'factory': incremental_device_git_factory,
}
c['builders'].append(this_builder)


for num in range(0,len(slaves)):
	#Full
	this_builder = {'name': full_builder_names[num],
		'slavename': slave_names[num],
		'factory': full_git_factory,
	}
	c['builders'].append(this_builder)

	#Try fledge
	#this_builder = {'name': try_fledge_builder_names[num],
	#	'slavename': slave_names[num],
	#	'factory': try_fledge_git_factory,
	#}
	#c['builders'].append(this_builder)

	#Try fledge_drt
	#this_builder = {'name': try_fledge_drt_builder_names[num],
	#	'slavename': slave_names[num],
	#	'factory': try_fledge_drt_git_factory,
	#}
	#c['builders'].append(this_builder)

	#Try device
	#this_builder = {'name': try_device_builder_names[num],
	#	'slavename': slave_names[num],
	#	'factory': try_device_git_factory,
	#}
	#c['builders'].append(this_builder)


#Test Slaves
for num in range(0,len(test_slaves)):
	this_builder = {'name': test_builder_names[num],
	'slavename': test_slave_names[num],
	'factory': test_git_factory,
	}
	c['builders'].append(this_builder)


####### STATUS TARGETS

c['status'] = []
# HTML
from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010,allowForce=True))

# IRC
from buildbot.status import words
irc = words.IRC("localhost", "buildbot",
                     channels=["buildbot_results"])
c['status'].append(irc)

# MAIL
from buildbot.status import mail
test_mailer = mail.MailNotifier(fromaddr="buildbot@md-athens-01.swlab.rim.net",
		       mode='failing',
                       extraRecipients=['sccameron@rim.com'],
		       lookup='rim.com',
		       builders=test_builder_names,
		       relayhost="xch81ykf.rim.net")

incremental_mailer_pass = mail.MailNotifier(fromaddr="buildbot@md-athens-01.swlab.rim.net",
		       mode='passing',
                       extraRecipients=['sccameron@rim.com'],
		       lookup='rim.com',
		       builders=all_incremental_builder_names,
		       relayhost="xch81ykf.rim.net")

incremental_mailer_fail = mail.MailNotifier(fromaddr="buildbot@md-athens-01.swlab.rim.net",
		       mode='failing',
                       extraRecipients=['sccameron@rim.com','AthensDEV@rim.com'],
		       lookup='rim.com',
		       builders=all_incremental_builder_names,
		       relayhost="xch81ykf.rim.net")

full_mailer = mail.MailNotifier(fromaddr="buildbot@md-athens-01.swlab.rim.net",
                       extraRecipients=['sccameron@rim.com'],
		       builders=full_builder_names,
		       relayhost="xch81ykf.rim.net")

try_mailer = mail.MailNotifier(fromaddr="buildbot@md-athens-01.swlab.rim.net",
                       extraRecipients=['sccameron@rim.com'],
		       lookup='rim.com',
		       builders=all_try_builder_names,
		       relayhost="xch81ykf.rim.net")

incremental_drt_mailer = mail.MailNotifier(fromaddr="buildbot@md-athens-01.swlab.rim.net",
                       extraRecipients=['sccameron@rim.com'],
		       lookup='rim.com',
		       builders=all_incremental_drt_builder_names,
		       relayhost="xch81ykf.rim.net")

c['status'].append(test_mailer)
c['status'].append(incremental_mailer_pass)
c['status'].append(incremental_mailer_fail)
#c['status'].append(incremental_drt_mailer)
c['status'].append(full_mailer)
#c['status'].append(try_mailer)




####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Olympia"
c['projectURL'] = "http://md-athens-01.swlab.rim.net/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://md-athens-01.swlab.rim.net:8010/"
